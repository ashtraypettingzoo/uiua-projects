# Uiua 0.13.0-dev.2
# https://uiua.org/pad?src=0_13_0-dev_2__IyBVaXVhIDAuMTMuMC1kZXYuMgojIFt1cmxdCgojIFRPRE86IGhpZ2gvbG93IHBhc3MgZmlsdGVycwojIFRPRE86IElSIGltcG9ydGluZwojIFRPRE86IGZpeCBTdHIgKHN0cmV0Y2gpIGJ1enppbmcKIyBUT0RPOiBTaWQgKHNpZGUgYnkgc2lkZSkKIyBUT0RPOiBEd24gKGRvd25zYW1wbGUpCiMgVE9ETzogU2hwICh3YXZlc2hhcGUpCgpTIOKGkCAyMDQ4ICAgICAgICAgICAgICAgICAgICAjIFNhbXBsZXMgcGVyIG9zY2lsbGF0b3IKTyDihpAgMjU2ICAgICAgICAgICAgICAgICAgICAgIyBPc2NpbGxhdG9ycyBwZXIgdGFibGUKVCDihpAgw5dTIE8gICAgICAgICAgICAgICAgICAgICMgU2FtcGxlcyBwZXIgdGFibGUKU1Ug4oaQIMO3MisxICAgICAgICAgICAgICAgICAgICMgU2lnbmVkIHRvIHVuc2lnbmVkClVTIOKGkCAtMcOXMiAgICAgICAgICAgICAgICAgICAjIFVuc2lnbmVkIHRvIHNpZ25lZApPVSDihpAgw7fin5zih6FTICAgICAgICAgICAgICAgICAgICMgT3NjaWxsYXRvciBiYXNlLCB1bnNpZ25lZCAwLTEKT1Qg4oaQIMOXz4RPVSAgICAgICAgICAgICAgICAgICAjIE9zY2lsbGF0b3IgYmFzZSwgdHJpZ29ub21ldHJpYyAwLTLPgApSIOKGkCDihq_CpFQgICAgICAgICAgICAgICAgICAgICAjIE9zY2lsbGF0b3IgdG8gdGFibGUgKHJlcGVhdCkKVSDihpAg4o2lKOKKouKNieKGr-KKnzrin5zDtzLiirjip7spICAgICAgICAgICAjIE9jdGF2ZSB1cCAoZm9yIHBsYXliYWNrIG9ubHkpCkdIIOKGkCAyMDAgICAgICAgICAgICAgICAgICAgICMgR3JhcGggaGVpZ2h0CkMg4oaQIOKGpcKvMeKGpzEgICAgICAgICAgICAgICAgICAgIyBDbGFtcApTVyDihpAg4oqP4pe_4qe7LCAgICAgICAgICAgICAgICAgICAjIFNlbGVjdCAod3JhcHBlZCkKU0kg4oaQICviipnDl-KfnC3iioPiioMoU1fijIopKFNX4oyIKSgt4oq44oyKKSAjIFNlbGVjdCAoaW50ZXJwb2xhdGVkKQpSSSDihpAgU0nDl-KHoTrDtyzip7ssICAgICAgICAgICAgICAjIFJlc2l6ZSAoaW50ZXJwb2xhdGVkKQpDUyDihpAg4oi_K863ICAgICAgICAgICAgICAgICAgICAjIENvc2luZQpOUiDihpAg4oan4oq44oalICAgICAgICAgICAgICAgICAgICAjIE5hTiByZXBsYWNlClNDIOKGkCBOUjHDt-KfnOKIvyAgICAgICAgICAgICAgICAgIyBTaW5jClZCIOKGkCDDty0x4p-c4oehTyAgICAgICAgICAgICAgICAgIyBWYWx1ZSBiYXNlClZSIOKGkCAr4oqZw5c6LeKfnDogICAgICAgICAgICAgICAgIyBWYWx1ZSByYW5nZSBbbWluLCBtYXgsIHZhbHVlc10KR0wg4oaQIDE2ICAgICAgICAgICAgICAgICAgICAgIyBHSUYgbGVuZ3RoIChmcmFtZXMpClLigoAg4oaQIOKYhzAgICAgICAgICAgICAgICAgICAgICAjIFJlcmFuayB6ZXJvClLigoEg4oaQIOKYhzEgICAgICAgICAgICAgICAgICAgICAjIFJlcmFuayBvbmUKViEg4oaQIFLigoHiiaFeIVLigoAKVlYhIOKGkCBS4oKB4omhXiFS4oKA4oqZUuKCgApWVkEhIOKGkCBS4oKB4omhXiFS4oKA4oqZUuKCgOKKmeKKmVLigoEKVkEhIOKGkCBS4oKB4omhXiFS4oKA4oqZUuKCgQpWQUEhIOKGkCBS4oKB4omhXiFS4oKA4oqZUuKCgeKKmeKKmVLigoEKQSEg4oaQIFLigoHiiaFeIVLigoEKQUEhIOKGkCBS4oKB4omhXiFS4oKB4oqZUuKCgQoKIyBDb252b2x1dGlvbnMKCkNJZCDihpAgwqTCpDEgIyBJZGVudGl0eSAoZGVsdGEpIGNvbnZvbHV0aW9uCgojIFRhYmxlIHZhbHVlcwoKVmFsIOKGkCBWUuKKmeKKmShWQikgICAgICMgVmFsdWVzIChsaW5lYXIpIFttaW4sIG1heF0KVmFsUEkg4oaQIFZS4oqZ4oqZKOKBvzpWQikgIyBWYWx1ZXMgKHBvd2VyIGluKSBbbWluLCBtYXgsIGJhc2VdClZhbFBPIOKGkCDih4xWYWxQSTogICAgIyBWYWx1ZXMgKHBvd2VyIG91dCkgW21pbiwgbWF4LCBiYXNlXQoKIyBIZWxwZXJzCgpSbmRJbnQg4oaQICsx4oyKw5fimoIgIyBSYW5kb20gaW50ZWdlciAxLU4gW01heF0KCiMgT3BlcmF0aW9ucwoKU3VtIOKGkCDCsOKWoS8r4o2aUuKCgSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIFN1bSBbe1dhdmVzL1RhYmxlc31dCkF2ZyDihpAgU3Vtw7fiirjip7sgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgQXZlcmFnZSBbe1dhdmVzL1RhYmxlc31dCkFtcCDihpAgVkEhw5cgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBBbXBsaWZ5IFtBbW91bnQsIFdhdmUvVGFibGVdCk1heCDihpAgQSEo4peM4o2l4p-cw7fiiaAwLuKGpeKIqS_ihqXin5zCry4pICAgICAgICAgICAgICAgICAgICAjIE1heGltaXplIFtXYXZlL1RhYmxlXQpQaHMg4oaQIFZBISjihrvigYXDl-KnuywpICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUGhhc2Ugc2hpZnQgW0Ftb3VudCwgV2F2ZS9UYWJsZV0KWmVyIOKGkCBBISjihrviipcv4oan4oy1Li4pICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBQaGFzZSBzaGlmdCB0byB6ZXJvIHBvaW50IFtXYXZlL1RhYmxlXQpCaXQg4oaQIFZBIShVU-KGpzHDty0xOuKMisOXLFNVOuKBheKBvzoyKzHDlzE1LTox4oia4oanMeKGpTApICAjIEJpdGNydXNoIFtBbW91bnQgKDAtMSksIFdhdmUvVGFibGVdClJldiDihpAgQSHih4wgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUmV2ZXJzZSBbV2F2ZS9UYWJsZV0KSW52IOKGkCBBIcKvICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIEludmVydCBbV2F2ZS9UYWJsZV0KTWlyIOKGkCBBISjiioLih4wu4oaZw7cyUykgICAgICAgICAgICAgICAgICAgICAgICAgICAjIE1pcnJvciAxc3QgaGFsZiBbV2F2ZS9UYWJsZV0KRmFkIOKGkCBWQSEo4oeM4qyaMcOX4oeMOuKsmjHin5zDl8O34qe7LuKHoeKMisO3MsOXU-KGpTApICAgICAgICAgICAgIyBGYWRlIGluICYgb3V0IFtBbW91bnQgKDAtMSksIFdhdmUvVGFibGVdCkNycyDihpAgVkFBISgr4oqZKMOXLToxKTrin5zDl-KKmTopICAgICAgICAgICAgICAgICAgICMgQ3Jvc3NmYWRlIFtBbW91bnQgKDAtMSksIFN0YXJ0IFdhdmUvVGFibGUsIEVuZCBXYXZlL1RhYmxlXQpTdHIg4oaQIFZWQSEo4oqC4oqZUkk6LTpT4p-cUkniipniioPihpnihpjiiKko4oanLTFT4oalMeKBhcOXU-KGpzHihqUwKSkgIyBTdHJldGNoIFtUbyAoMC0xKSwgRnJvbSAoMC0xKSwgV2F2ZS9UYWJsZV0KU2hjIOKGkCBWQSEoQyspICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgU2hpZnQgdXAvZG93biAoY2xpcCkgW0Ftb3VudCAowq8xLTEpLCBXYXZlL1RhYmxlXQpTaHcg4oaQIFZBISjijaUoVVPil78xU1Up4omgMOKfnCspICAgICAgICAgICAgICAgICAgICAjIFNoaWZ0IHVwL2Rvd24gKHdyYXApIFtBbW91bnQgKMKvMS0xKSwgV2F2ZS9UYWJsZV0KU2xjIOKGkCBWQSEoUkkgU-KGr-KZreKBheKGpTHDl1MpICAgICAgICAgICAgICAgICAgICAgICMgU2xpY2UgW0Ftb3VudCAoMC0xKSwgV2F2ZS9UYWJsZV0KU3BkIOKGkCBWQSEoU2xj4oG_OjIpICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBTcGVlZCB1cC9kb3duIFtPY3RhdmVzLCBXYXZlL1RhYmxlXQpTcGwg4oaQIFZBQSEo4oqC4oqT4oaZ4oaY4p-cOuKBhcOXU-KGpzHihqUwKSAgICAgICAgICAgICAgICAgICAjIFNwbGljZSBbQW1vdW50ICgwLTEpLCBXYXZlL1RhYmxlIDEsIFdhdmUvVGFibGUgMl0KQU0g4oaQIFZBQSEow5crMcO3MsOXLTE6KSAgICAgICAgICAgICAgICAgICAgICAgICMgQW1wbHV0dWRlIG1vZHVsYXRpb24gW0FtcGxpdHVkZSwgTW9kdWxhdG9yLCBDYXJyaWVyXQpSTSDihpAgQUEhw5cgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgUmluZyBtb2R1bGF0aW9uIFtNb2R1bGF0b3IsIENhcnJpZXJdCkZNIOKGkCBWQUEhKFNJw5dTK09Vw5cpICAgICAgICAgICAgICAgICAgICAgICAgICMgRnJlcXVlbmN5IG1vZHVsYXRpb24gW0FtcGxpdHVkZSwgTW9kdWxhdG9yLCBDYXJyaWVyXQpDbnYg4oaQIEFBISgvK8OX4o2J4per4oqZKOKGr-KZrSk6LTHiirgr4qe7LOKnu-KfnDopICAgICAgICAgICAgICMgQ29udm9sdmUgW0ltcHVsc2UsIFdhdmUvVGFibGVdCgojIEJhc2ljIHdhdmVmb3JtcwoKU2luIOKGkCBWISjiiL_DlzpPVCkgICAgICAgICAgICAgIyBTaW5lIHdhdmUgW0hhcm1vbmljXQpTYXcg4oaQIFYhKFVT4pe_McOXOk9VKSAgICAgICAgICAjIFNhdyB3YXZlIFtIYXJtb25pY10KVHJpIOKGkCBWIShVU-KMtVVT4pe_MSswLjI1wq_DlzpPVSkgIyBUcmlhbmdsZSB3YXZlIFtIYXJtb25pY10KUHVsIOKGkCBWViEoVVPiiaRVUzpTYXcpICAgICAgICAjIFB1bHNlIHdhdmUgW0hhcm1vbmljLCBEdXR5XQpTcXIg4oaQIFYhKFB1bDowLjUpICAgICAgICAgICAjIFNxdWFyZSB3YXZlIFtIYXJtb25pY10KTnN3IOKGkCAo4piHMVVT4o2lKOKKguKagilTW10pICAgICAgICAjIE5vaXNlIHdhdmUgW10KTnN0IOKGkCAo4o2lKOKKgk5zdylPW10pICAgICAgICAgICMgTm9pc2UgdGFibGUgW10KCiMgVXRpbGl0eQoKUHJpbnQg4oaQICZwZgpFeHBvcnQg4oaQICZhcCBD4pmtClRlc3Qg4oaQICZhcCBVM1IgQ-KZrQpHcmFwaCDihpAg4o2i4oqiKD0x4qe7KeKWvT0w4oeh4oyKw7dHTCBP4omhKOKHjOKsmjHiip7iiaDih6FHSOKBhcOXLTFHSCBTVSBVMkMpCkltYWdlIOKGkCAmaW1z4oavT19TIFNVIFIgQ-KZrQpJbXBvcnRJbWFnZSDihpAgUkkgT-KJoVJJIFPijZzijYniiaEow7czLyvihpkzKeKXjMKwaW1nJmZyYWIKSW1wb3J0V2F2ZSDihpAgUuKCgCBSSSBT4peM4peMwrBhdWRpbyZmcmFiCkltcG9ydFRhYmxlIOKGkCDihq9PX1MgUkkgVOKXjOKXjMKwYXVkaW8mZnJhYiAjIEltcG9ydCAyNTYtd2F2ZSB0YWJsZQpUYWJsZUF2ZXJhZ2Ug4oaQIFLigoHDt08vK-KGr09fUyAgICAgICAgICAgICMgVGFibGUgdG8gd2F2ZSBbVGFibGVdClRhYmxlSW5kZXgg4oaQIFLigoHiiqHihqctMU_ihqUw4oGFOuKGr09fUzogICAgICAgICMgVGFibGUgdG8gd2F2ZSBbSW5kZXggKDAtMjU1KSwgVGFibGVdCkltYWdlVG9UYWJsZSDihpAgVVMKR3JhcGhDb252IOKGkCBHcmFwaCBBISjirJoww5fihq9TMSkKCiMgU2FtcGxlIHdhdmVmb3Jtcy93YXZldGFibGVzCgpXYXZl4oKBIOKGkCBBdmd7U2luMyBBbXAwLjdTaW4yIFNpbjF9CldhdmXigoIg4oaQIEFNMC40U2luNyBBTTAuNVNpbjIgU2luMQpXYXZl4oKCIOKGkCBBdmd7U2F3MSAoUHVsIDIgMC4yKX0KV2F2ZeKChCDihpAgQml0MC43IEZNMC4xU2luNyBTaW4xClRibOKCgSDihpAgRk0oVmFsIDAgMSkgU2luMiBTaW4xClRibOKCgiDihpAgTWF4IEF2Z3tBbXAoVmFsIDAgMSlTaW4yIFNpbjF9ClRibOKCgyDihpAgQml0KFZhbCAwIDEpIENycyhWYWxQSSAwIDEgMikgU2luMSBTaW4zCgpQcmludCAiVGJs4oKDIgpUZXN0IFRibOKCgwpJbWFnZSBUYmzigoMKR3JhcGggVGJs4oKDCg==

# TODO: high/low pass filters
# TODO: IR importing
# TODO: fix Str (stretch) buzzing
# TODO: Sid (side by side)
# TODO: Dwn (downsample)
# TODO: Shp (waveshape)

S ← 2048                    # Samples per oscillator
O ← 256                     # Oscillators per table
T ← ×S O                    # Samples per table
SU ← ÷2+1                   # Signed to unsigned
US ← -1×2                   # Unsigned to signed
OU ← ÷⟜⇡S                   # Oscillator base, unsigned 0-1
OT ← ×τOU                   # Oscillator base, trigonometric 0-2π
R ← ↯¤T                     # Oscillator to table (repeat)
U ← ⍥(⊢⍉↯⊟:⟜÷2⊸⧻)           # Octave up (for playback only)
GH ← 200                    # Graph height
C ← ↥¯1↧1                   # Clamp
SW ← ⊏◿⧻,                   # Select (wrapped)
SI ← +⊙×⟜-⊃⊃(SW⌊)(SW⌈)(-⊸⌊) # Select (interpolated)
RI ← SI×⇡:÷,⧻,              # Resize (interpolated)
CS ← ∿+η                    # Cosine
NR ← ↧⊸↥                    # NaN replace
SC ← NR1÷⟜∿                 # Sinc
VB ← ÷-1⟜⇡O                 # Value base
VR ← +⊙×:-⟜:                # Value range [min, max, values]
GL ← 16                     # GIF length (frames)
R₀ ← ☇0                     # Rerank zero
R₁ ← ☇1                     # Rerank one
V! ← R₁≡^!R₀
VV! ← R₁≡^!R₀⊙R₀
VVA! ← R₁≡^!R₀⊙R₀⊙⊙R₁
VA! ← R₁≡^!R₀⊙R₁
VAA! ← R₁≡^!R₀⊙R₁⊙⊙R₁
A! ← R₁≡^!R₁
AA! ← R₁≡^!R₁⊙R₁

# Convolutions

CId ← ¤¤1 # Identity (delta) convolution

# Table values

Val ← VR⊙⊙(VB)     # Values (linear) [min, max]
ValPI ← VR⊙⊙(ⁿ:VB) # Values (power in) [min, max, base]
ValPO ← ⇌ValPI:    # Values (power out) [min, max, base]

# Helpers

RndInt ← +1⌊×⚂ # Random integer 1-N [Max]

# Operations

Sum ← °□/+⍚R₁                               # Sum [{Waves/Tables}]
Avg ← Sum÷⊸⧻                                # Average [{Waves/Tables}]
Amp ← VA!×                                  # Amplify [Amount, Wave/Table]
Max ← A!(◌⍥⟜÷≠0.↥∩/↥⟜¯.)                    # Maximize [Wave/Table]
Phs ← VA!(↻⁅×⧻,)                            # Phase shift [Amount, Wave/Table]
Zer ← A!(↻⊗/↧⌵..)                           # Phase shift to zero point [Wave/Table]
Bit ← VA!(US↧1÷-1:⌊×,SU:⁅ⁿ:2+1×15-:1√↧1↥0)  # Bitcrush [Amount (0-1), Wave/Table]
Rev ← A!⇌                                   # Reverse [Wave/Table]
Inv ← A!¯                                   # Invert [Wave/Table]
Mir ← A!(⊂⇌.↙÷2S)                           # Mirror 1st half [Wave/Table]
Fad ← VA!(⇌⬚1×⇌:⬚1⟜×÷⧻.⇡⌊÷2×S↥0)            # Fade in & out [Amount (0-1), Wave/Table]
Crs ← VAA!(+⊙(×-:1):⟜×⊙:)                   # Crossfade [Amount (0-1), Start Wave/Table, End Wave/Table]
Str ← VVA!(⊂⊙RI:-:S⟜RI⊙⊃↙↘∩(↧-1S↥1⁅×S↧1↥0)) # Stretch [To (0-1), From (0-1), Wave/Table]
Shc ← VA!(C+)                               # Shift up/down (clip) [Amount (¯1-1), Wave/Table]
Shw ← VA!(⍥(US◿1SU)≠0⟜+)                    # Shift up/down (wrap) [Amount (¯1-1), Wave/Table]
Slc ← VA!(RI S↯♭⁅↥1×S)                      # Slice [Amount (0-1), Wave/Table]
Spd ← VA!(Slcⁿ:2)                           # Speed up/down [Octaves, Wave/Table]
Spl ← VAA!(⊂⊓↙↘⟜:⁅×S↧1↥0)                   # Splice [Amount (0-1), Wave/Table 1, Wave/Table 2]
AM ← VAA!(×+1÷2×-1:)                        # Amplutude modulation [Amplitude, Modulator, Carrier]
RM ← AA!×                                   # Ring modulation [Modulator, Carrier]
FM ← VAA!(SI×S+OU×)                         # Frequency modulation [Amplitude, Modulator, Carrier]
Cnv ← AA!(/+×⍉◫⊙(↯♭):-1⊸+⧻,⧻⟜:)             # Convolve [Impulse, Wave/Table]

# Basic waveforms

Sin ← V!(∿×:OT)             # Sine wave [Harmonic]
Saw ← V!(US◿1×:OU)          # Saw wave [Harmonic]
Tri ← V!(US⌵US◿1+0.25¯×:OU) # Triangle wave [Harmonic]
Pul ← VV!(US≤US:Saw)        # Pulse wave [Harmonic, Duty]
Sqr ← V!(Pul:0.5)           # Square wave [Harmonic]
Nsw ← (☇1US⍥(⊂⚂)S[])        # Noise wave []
Nst ← (⍥(⊂Nsw)O[])          # Noise table []

# Utility

Print ← &pf
Export ← &ap C♭
Test ← &ap U3R C♭
Graph ← ⍢⊢(=1⧻)▽=0⇡⌊÷GL O≡(⇌⬚1⊞≠⇡GH⁅×-1GH SU U2C)
Image ← &ims↯O_S SU R C♭
ImportImage ← RI O≡RI S⍜⍉≡(÷3/+↙3)◌°img&frab
ImportWave ← R₀ RI S◌◌°audio&frab
ImportTable ← ↯O_S RI T◌◌°audio&frab # Import 256-wave table
TableAverage ← R₁÷O/+↯O_S            # Table to wave [Table]
TableIndex ← R₁⊡↧-1O↥0⁅:↯O_S:        # Table to wave [Index (0-255), Table]
ImageToTable ← US
GraphConv ← Graph A!(⬚0×↯S1)

# Sample waveforms/wavetables

Wave₁ ← Avg{Sin3 Amp0.7Sin2 Sin1}
Wave₂ ← AM0.4Sin7 AM0.5Sin2 Sin1
Wave₂ ← Avg{Saw1 (Pul 2 0.2)}
Wave₄ ← Bit0.7 FM0.1Sin7 Sin1
Tbl₁ ← FM(Val 0 1) Sin2 Sin1
Tbl₂ ← Max Avg{Amp(Val 0 1)Sin2 Sin1}
Tbl₃ ← Bit(Val 0 1) Crs(ValPI 0 1 2) Sin1 Sin3

Print "Tbl₃"
Test Tbl₃
Image Tbl₃
Graph Tbl₃
